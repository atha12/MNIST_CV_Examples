# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m2pZg9zTtCCyGMlB5lgJHY_2qsYSL6z2
"""

# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

!ls "/content/drive/My Drive"

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

from keras.models import Sequential
from keras.layers import Dense , Dropout , Lambda, Flatten
from keras.optimizers import Adam ,RMSprop
from sklearn.model_selection import train_test_split
from keras import  backend as K
from keras.preprocessing.image import ImageDataGenerator

df_train=pd.read_csv("/content/drive/My Drive/train.csv")

df_train.head(5)

df_test=pd.read_csv("/content/drive/My Drive/test.csv")
df_test.head(5)

X_train=(df_train.iloc[:,1:].values).astype('float32')

y_train=(df_train.iloc[:,0].values).astype('int32')

X_test = df_test.values.astype('float32')

X_train = X_train.reshape(X_train.shape[0], 28, 28)
X_train

for i in range(2, 9):
    plt.subplot(330 + (i+1))
    plt.imshow(X_train[i], cmap=plt.get_cmap('gray'))

X_train = X_train.reshape(X_train.shape[0],28,28,1)

X_test = X_test.reshape(X_test.shape[0], 28, 28,1)
X_test.shape

meanPixel = X_train.mean().astype(np.float32)

stdPixel = X_train.std().astype(np.float32)

from keras.utils.np_utils import to_categorical
y_train= to_categorical(y_train)

num_class=y_train.shape[1]

plt.plot(y_train[15])
plt.xticks(range(10))

from keras.models import Sequential
from keras.layers.core import  Lambda , Dense, Flatten, Dropout
from keras.callbacks import EarlyStopping
from keras.layers import BatchNormalization, Convolution2D , MaxPooling2D

def standardize(x):
  return (x-meanPixel)/stdPixel

model = Sequential()
model.add(Lambda(standardize,input_shape=(28,28,1)))
model.add(Flatten())
model.add(Dense(512,activation="relu"))
model.add(Dense(512,activation="relu"))
model.add(Dense(10,activation='softmax'))

from keras.optimizers import RMSprop
model.compile(optimizer=Adam(lr=0.01),
             loss='categorical_crossentropy',
             metrics=['accuracy'])

from keras.preprocessing import image
gen = image.ImageDataGenerator()

#split
from sklearn.model_selection import train_test_split

X=X_train
y=y_train

X_train,X_val,y_train,y_val=train_test_split(X_train,y_train,test_size=0.2)

batches=gen.flow(X_train,y_train,batch_size=64)
val_batches=gen.flow(X_val,y_val,batch_size=64)



history = model.fit_generator(generator=batches,steps_per_epoch=batches.n,
                              epochs=2,validation_data=val_batches,
                              validation_steps=val_batches.n)

model.optimizer.lr=0.01
batches=gen.flow(X,y,batch_size=64)
history=model.fit_generator(generator=batches,steps_per_epoch=batches.n,epochs=2)

predictions=model.predict_classes(X_test,verbose=0)
submissions=pd.DataFrame({"ImageId":list(range(1,len(predictions)+1)),"Label":predictions})

submissions.to_csv("fullynormalnn1.csv",index=False,header=True)

